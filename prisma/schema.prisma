generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// TODO: Should be renamed to "User" not users
model User {
  id                   String         @id @default(uuid())
  address              String         @unique
  created_at           DateTime?      @default(now()) @db.Timestamptz(6)
  last_logged_in       DateTime?      @default(now()) @db.Timestamptz(6)
  username             String?        @unique
  badges               Json[]         @db.Json
  level                BigInt?        @default(0)
  quests               Json[]         @db.Json
  inventory            Json[]         @db.Json
  nonce                String?
  profile_picture      String?
  role                 UserRole       @default(USER)
  updated_at           DateTime       @updatedAt
  friendships_accepted Friendship[]   @relation("friend")
  friendships          Friendship[]   @relation("user")
  created_listings     Listing[]
  nfts                 NFT[]
  offers_made          Offer[]        @relation("offerFrom")
  offers_received      Offer[]        @relation("offerTo")
  purchases            Purchase[]
  created_raffles      Raffle[]
  rewards_earned       RewardEarned[]
  user_raffles         UserRaffle[]

  @@index([address])
}

model UsernameDirectory {
  id                 String    @id @default(uuid())
  address            String    @unique
  opensea_username   String?
  looksrare_username String?
  blur_username      String?
  twitter_username   String?
  discord_username   String?
  threads_username   String?
  facebook_username  String?
  instagram_username String?
  snapchat_username  String?
  linkedin_username  String?
  pinterest_username String?
  telegram_username  String?
  whatsapp_username  String?
  wechat_username    String?
  twitch_username    String?
  reddit_username    String?
  meetup_username    String?
  tiktok_username    String?
  weibo_username     String?
  youtube_username   String?
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime  @updatedAt

  @@index([address])
}

model Friendship {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  user_id    String
  friend_id  String
  updated_at DateTime @updatedAt
  friend     User     @relation("friend", fields: [friend_id], references: [id])
  user       User     @relation("user", fields: [user_id], references: [id])
}

model UserRaffle {
  id        String @id @default(uuid())
  user_id   String
  raffle_id String
  raffle    Raffle @relation(fields: [raffle_id], references: [id])
  user      User   @relation(fields: [user_id], references: [id])
}

model Purchase {
  id         String   @id @default(uuid())
  listing_id String
  buyer_id   String
  amount     Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  buyer      User     @relation(fields: [buyer_id], references: [id])
  listing    Listing  @relation(fields: [listing_id], references: [id])

  @@index([id])
}

model Listing {
  id         String     @id @default(uuid())
  nft_id     String
  price      Float
  currency   String
  creator_id String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  creator    User       @relation(fields: [creator_id], references: [id])
  nft        NFT        @relation(fields: [nft_id], references: [id])
  purchase   Purchase[]

  @@index([id])
}

model Offer {
  id         String          @id @default(uuid())
  from_id    String
  to_id      String
  nft_id     String
  amount     Float
  message    String?
  status     EnumOfferStatus
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  from       User            @relation("offerFrom", fields: [from_id], references: [id])
  nft        NFT             @relation(fields: [nft_id], references: [id])
  to         User            @relation("offerTo", fields: [to_id], references: [id])

  @@index([id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Raffle {
  id               String       @id @default(uuid())
  created_at       DateTime?    @default(now()) @db.Timestamptz(6)
  name             String?
  token_id         Int?
  nft_address      String?      @db.VarChar
  start_date       DateTime?    @db.Timestamptz(6)
  end_date         DateTime?    @db.Timestamptz(6)
  raffle_cost      Float?       @db.Real
  max_tickets      Int?
  sold_tickets     Int?
  created_by       String?      @db.VarChar
  transaction_list Json[]       @db.Json
  favourite_count  Int?
  nft_image        String?      @db.VarChar
  raffler_id       String?
  raffler          User?        @relation(fields: [raffler_id], references: [id])
  participant_list UserRaffle[]

  @@index([id])
}

model NFT {
  id                  String      @id @default(uuid())
  token_id            String
  name                String
  description         String
  image               String
  collection_id       BigInt?
  owner_id            String?
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  listed_at           DateTime?
  category_id         Int?
  listings            Listing[]
  category            Category?   @relation(fields: [category_id], references: [id])
  collection_contract Collection? @relation(fields: [collection_id], references: [id])
  owner               User?       @relation(fields: [owner_id], references: [id])
  offers              Offer[]

  @@index([owner_id])
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  nfts       NFT[]

  @@index([name])
}

model Reward {
  id         Int      @id @default(autoincrement())
  dispensed  BigInt   @default(0)
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model RewardEarned {
  id         BigInt   @id @default(autoincrement())
  name       String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User     @relation(fields: [user_id], references: [id])

  @@index([id])
}

/// Model to store NFT collection data
model Collection {
  id                         BigInt    @id @default(autoincrement())
  contract_address           String    @unique
  name                       String
  symbol                     String
  description                String?
  website                    String?
  email                      String?
  twitter                    String?
  discord                    String?
  telegram                   String?
  github                     String?
  instagram                  String?
  medium                     String?
  logo_url                   String?
  banner_url                 String?
  featured_url               String?
  large_image_url            String?
  attributes                 Json?
  erc_type                   String
  token_type                 String
  deploy_block_number        BigInt
  owner                      String
  contract_deployer          String
  verified                   Boolean
  opensea_verified           Boolean
  baddogs_verified           Boolean
  rug_verified               Boolean
  sus_verified               Boolean
  royalty                    Float?
  items_total                BigInt
  amounts_total              BigInt
  owners_total               Int
  opensea_floor_price        Float?
  floor_price                Float
  collections_with_same_name Json?
  price_symbol               String
  volume_total               Float?
  sales_total                Int?
  average_price              Float?
  lowest_price_24h           Float?
  average_price_24h          Float?
  volume_24h                 Float?
  sales_24h                  Int?
  highest_price              Float?
  volume_1d                  Float?
  volume_7d                  Float?
  volume_30d                 Float?
  volume_change_1d           String?
  volume_change_7d           String?
  volume_change_30d          String?
  market_cap                 BigInt?
  average_price_change_1d    String?
  average_price_change_7d    String?
  average_price_change_30d   String?
  created_at                 DateTime  @default(now())
  asset_contract_type        String?
  blur_floor_price           Float?
  chain_identifier           String?
  contract_name              String?
  image_url                  String?
  is_featured                Boolean?
  is_hidden                  Boolean?
  is_nsfw                    Boolean?
  looksrare_floor_price      Float?
  slug                       String?
  version                    Float?
  ingested_at                DateTime?
  updated_at                 DateTime  @updatedAt
  NFT                        NFT[]

  @@index([contract_address])
  @@index([contract_deployer])
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
  BOT
  AI
}

enum EnumOfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
